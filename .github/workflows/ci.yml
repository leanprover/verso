on:
  push:
    branches:
      - master
      - main
      - nightly-testing
  pull_request:
  merge_group:

name: Continuous Integration

jobs:
  build:
    name: Build and test
    runs-on: nscloud-ubuntu-22.04-amd64-8x16
    steps:
      - name: install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v3.0.0/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> $GITHUB_PATH

      - uses: actions/checkout@v3

      - name: List all files
        run: |
          find . -name "*.lean" -type f

      - name: lean version
        run: |
          lean --version

      - name: Compute short SHA
        id: shortSHA
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Cache .lake
        uses: actions/cache@v4
        with:
          path: .lake
          # The SHA is in the key to get the most recent cache possible, rather than just saving a single one for each Lean/deps version and not touching it.
          key: ${{ runner.os }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lean-toolchain') }}-${{ steps.shortSHA.outputs.short_sha }}
          # Try to restore cache for same OS/Lean/deps, but don't get less specific, because Lake isn't always happy to get build product version mismatches
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('lake-manifest.json') }}-${{ hashFiles('lean-toolchain') }}-

      # This was failing CI from clang crashing, so do it first for fast turnaround
      - name: Build the website examples subproject
        run: |
          pushd examples/website-examples
          lake build
          lake build :examples
          popd

      - name: Build the project
        run: |
          lake build

      - name: Run tests
        run: |
          lake test

      - name: Generate the example website
        run: |
          lake exe demosite --output _out/examples/demosite

      - name: Generate the example genre's document
        run: |
          lake exe simplepage

      - name: Check internal links on the example website
        uses: lycheeverse/lychee-action@v2.6.1
        with:
          format: markdown
          jobSummary: true
          args: --base './_out/examples/demosite' --no-progress --offline './_out/examples/demosite/**/*.html'

      - name: Install PDF Dependencies
        uses: zauguin/install-texlive@v4
        with:
          texlive_version: 2025
          packages: |
            scheme-minimal
            l3packages
            tools
            latex-bin
            xpatch
            booktabs
            footmisc
            environ
            hyperref
            titlesec
            tocloft
            enumitem
            fmtcount
            glossaries
            datatool
            caption
            babel
            fontspec
            textcase
            memoir
            sourcecodepro
            sourcesanspro
            sourceserifpro
            fvextra
            upquote
            lineno
            float

      - name: Check `tlmgr` version
        run: tlmgr --version

      - name: Generate the manual
        run: |
          ./generate.sh
          cp _out/tex/main.pdf ./manual.pdf
          cp -r _out/html-single html-single-page
          zip -r html-single-page.zip html-single-page

      - name: Install TypeScript
        run: |
          sudo apt update && sudo apt install node-typescript

      - name: Type check the search bar code
        run: |
          pushd _out/html-multi/-verso-search
          tsc --noEmit -p jsconfig.json
          popd

      - name: Type check the xref redirect JS code
        run: |
          pushd static-web
          tsc --noEmit -p jsconfig.json
          popd

      - name: Check that projects emitted from tutorials tests build
        run: |
          lake exe tutorial-example
          failed_zips=()

          while IFS= read -r -d '' zipfile; do
            echo "Checking $zipfile..."
            stem=$(basename "$zipfile" .zip)
            zipdir=$(dirname "$zipfile")

            # Check that all files are under the expected top-level directory
            if ! unzip -Z1 "$zipfile" | grep -v "^$stem/" | grep -q .; then
              :  # All files are under $stem/, continue
            else
              echo "❌ FAIL: $zipfile contains files outside of '$stem/' directory"
              failed_zips+=("$zipfile: contains files outside of '$stem/' directory")
              continue
            fi

            # Unzip in place
            unzip -q "$zipfile" -d "$zipdir"

            # Check 1: Top-level directory matches stem
            if [ ! -d "$zipdir/$stem" ]; then
              echo "❌ FAIL: $zipfile does not contain top-level directory '$stem'"
              failed_zips+=("$zipfile: missing top-level directory '$stem'")
              continue
            fi

            # Check 2: lean-toolchain exists
            if [ ! -f "$zipdir/$stem/lean-toolchain" ]; then
              echo "❌ FAIL: $zipfile missing lean-toolchain"
              failed_zips+=("$zipfile: missing lean-toolchain")
              continue
            fi

            # Check 3: lake build succeeds
            if ! (cd "$zipdir/$stem" && lake build); then
              echo "❌ FAIL: $zipfile lake build failed"
              failed_zips+=("$zipfile: lake build failed")
              continue
            fi

            echo "PASS: $zipfile"
          done < <(find _out/tut -type f -name "*.zip" -print0)

          # Report results
          if [ ${#failed_zips[@]} -gt 0 ]; then
            echo ""
            echo "========================================="
            echo "FAILURES: ${#failed_zips[@]} zip file(s) failed checks:"
            printf '%s\n' "${failed_zips[@]}"
            exit 1
          else
            echo ""
            echo "All zip files passed checks."
          fi


      - name: Upload docs to artifact storage
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: "Verso manual (PDF and HTML)"
          path: |
            manual.pdf
            html-single-page.zip

      - uses: "marvinpinto/action-automatic-releases@latest"
        if: github.ref == 'refs/heads/main'
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          title: "Verso manual (PDF and HTML)"
          files: |
            manual.pdf
            html-single-page.zip

